import sqlite3
import os

db_path = "/app/data/plantify.db"
os.makedirs(os.path.dirname(db_path), exist_ok=True)
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# User profile table
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_profile (
    user_mail TEXT PRIMARY KEY,
    password_hash TEXT NOT NULL
);
""")

# Plant profile table
cursor.execute("""
CREATE TABLE IF NOT EXISTS plant_profile (
    plant_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    irrigation_cycle_days INTEGER,
    target_temperature_celsius REAL,
    target_sunlight_hours REAL,
    target_air_humidity_percent REAL,
    target_soil_moisture_percent REAL
);
""")

# Plant pot table
cursor.execute("""
CREATE TABLE IF NOT EXISTS plant_pot (
    pot_id INTEGER PRIMARY KEY AUTOINCREMENT,
    pot_name TEXT,
    pot_mac TEXT UNIQUE
);
""")

# User-pot assignment table
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_pot_assignment (
    pot_id INTEGER,
    user_id TEXT,
    PRIMARY KEY (pot_id, user_id),
    FOREIGN KEY (pot_id) REFERENCES plant_pot(pot_id),
    FOREIGN KEY (user_id) REFERENCES user_profile(user_mail)
);
""")

# Plant-pot assignment table
cursor.execute("""
CREATE TABLE IF NOT EXISTS plant_pot_assignment (
    pot_id INTEGER,
    plant_id INTEGER,
    assigned_to TIMESTAMP,
    PRIMARY KEY (pot_id, plant_id),
    FOREIGN KEY (pot_id) REFERENCES plant_pot(pot_id),
    FOREIGN KEY (plant_id) REFERENCES plant_profile(plant_id)
);
""")

# Sensor reading table
cursor.execute("""
CREATE TABLE IF NOT EXISTS sensor_reading (
    reading_id INTEGER PRIMARY KEY AUTOINCREMENT,
    pot_id INTEGER,
    temperature REAL,
    sunlight INTEGER,
    air_humidity REAL,
    soil_moisture REAL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (pot_id) REFERENCES plant_pot(pot_id)
);
""")

# Hash for password 'plantify123' generated by the hash_password function
real_hash = "100000$rekZVGwzssmgyD6M83OVag==$Z+pfzTjnc70ElEBqbGcAgOXFc6xRDOM/HaxwBhqEtjs="
cursor.execute("""
INSERT OR IGNORE INTO user_profile (user_mail, password_hash) VALUES (?, ?)
""", ("test@example.com", real_hash))
# Force update the password hash in case the user already exists
cursor.execute("""
UPDATE user_profile SET password_hash = ? WHERE user_mail = ?
""", (real_hash, "test@example.com"))

conn.commit()
conn.close()
print("All SQLite tables created!") 